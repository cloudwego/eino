// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -destination ../../internal/mock/components/reranker/reranker_mock.go --package reranker -source interface.go
//

// Package reranker is a generated GoMock package.
package reranker

import (
	context "context"
	reflect "reflect"

	reranker "github.com/cloudwego/eino/components/reranker"
	schema "github.com/cloudwego/eino/schema"
	gomock "go.uber.org/mock/gomock"
)

// MockReranker is a mock of Reranker interface.
type MockReranker struct {
	ctrl     *gomock.Controller
	recorder *MockRerankerMockRecorder
	isgomock struct{}
}

// MockRerankerMockRecorder is the mock recorder for MockReranker.
type MockRerankerMockRecorder struct {
	mock *MockReranker
}

// NewMockReranker creates a new mock instance.
func NewMockReranker(ctrl *gomock.Controller) *MockReranker {
	mock := &MockReranker{ctrl: ctrl}
	mock.recorder = &MockRerankerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReranker) EXPECT() *MockRerankerMockRecorder {
	return m.recorder
}

// Rerank mocks base method.
func (m *MockReranker) Rerank(ctx context.Context, query string, docs []*schema.Document, opts ...reranker.Option) ([]*schema.Document, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query, docs}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Rerank", varargs...)
	ret0, _ := ret[0].([]*schema.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rerank indicates an expected call of Rerank.
func (mr *MockRerankerMockRecorder) Rerank(ctx, query, docs any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query, docs}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rerank", reflect.TypeOf((*MockReranker)(nil).Rerank), varargs...)
}
